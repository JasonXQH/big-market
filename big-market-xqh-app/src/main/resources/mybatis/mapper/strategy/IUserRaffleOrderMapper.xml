<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.github.jasonxqh.infrastructure.dao.IUserRaffleOrderDao">
  <resultMap id="BaseResultMap" type="io.github.jasonxqh.infrastructure.dao.po.strategy.UserRaffleOrder">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="activity_id" jdbcType="BIGINT" property="activityId" />
    <result column="activity_name" jdbcType="VARCHAR" property="activityName" />
    <result column="strategy_id" jdbcType="BIGINT" property="strategyId" />
    <result column="order_id" jdbcType="VARCHAR" property="orderId" />
    <result column="order_time" jdbcType="TIMESTAMP" property="orderTime" />
    <result column="order_state" jdbcType="VARCHAR" property="orderState" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>

  <select id="queryUnusedUserRaffleOrder" parameterType="io.github.jasonxqh.infrastructure.dao.po.strategy.UserRaffleOrder"
          resultMap="BaseResultMap">
    select user_id, activity_id, activity_name, strategy_id, order_id, order_time, order_state
    from user_raffle_order
    where user_id = #{userId} and activity_id = #{activityId} and order_state = 'create'
    limit 1
  </select>

  <insert id="insertUserRaffleOrder" parameterType="io.github.jasonxqh.infrastructure.dao.po.strategy.UserRaffleOrder">
    insert into user_raffle_order
    (user_id,activity_id,activity_name,strategy_id,order_id,order_time,order_state,create_time,update_time)
    values
    (#{userId}, #{activityId}, #{activityName}, #{strategyId}, #{orderId}, #{orderTime}, #{orderState}, now(), now())
  </insert>

  <update id="updateUserRaffleOrderStateUsed" parameterType="io.github.jasonxqh.infrastructure.dao.po.strategy.UserRaffleOrder">
    update user_raffle_order
    set order_state = 'used' , update_time = now()
    where user_id = #{userId} and order_id = #{orderId} and order_state = 'create'
  </update>
</mapper>